# -*- coding: utf-8 -*-
"""app.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e0toHA337Y-gT2Rh1DaCfHT6B7hix8mY
"""

import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext

def process_file():
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx *.csv")])
    if not file_path:
        return

    try:
        if file_path.endswith('.xlsx'):
            excel_file = pd.ExcelFile(file_path)
            results = []
            for sheet in excel_file.sheet_names:
                df = pd.read_excel(file_path, sheet_name=sheet)
                dup_rows = df[df.duplicated()]
                dup_columns = df.columns[df.apply(pd.Series.duplicated).any()].tolist()
                results.append({
                    'sheet': sheet,
                    'duplicate_rows': len(dup_rows),
                    'duplicate_columns': dup_columns
                })
        else:
            df = pd.read_csv(file_path)
            dup_rows = df[df.duplicated()]
            dup_columns = df.columns[df.apply(pd.Series.duplicated).any()].tolist()
            results = [{
                'sheet': 'CSV File',
                'duplicate_rows': len(dup_rows),
                'duplicate_columns': dup_columns
            }]

        output.delete(1.0, tk.END)
        for res in results:
            output.insert(tk.END, f"Sheet/Report: {res['sheet']}\n")
            output.insert(tk.END, f"Duplicate rows: {res['duplicate_rows']}\n")
            output.insert(tk.END, f"Duplicate fields: {', '.join(res['duplicate_columns']) if res['duplicate_columns'] else 'None'}\n\n")
    except Exception as e:
        messagebox.showerror("Error", str(e))

root = tk.Tk()
root.title("Redundancy Checker")

frame = tk.Frame(root)
frame.pack(pady=10)

btn = tk.Button(frame, text="Upload Excel/CSV File", command=process_file)
btn.pack()

output = scrolledtext.ScrolledText(root, width=80, height=20)
output.pack(pady=10)

root.mainloop()

import pandas as pd
from google.colab import files

# Step 1: Upload file using Colab's upload widget
uploaded = files.upload()

for file_name in uploaded.keys():
    print(f"Processing file: {file_name}")
    if file_name.endswith('.xlsx'):
        excel_file = pd.ExcelFile(file_name)
        for sheet in excel_file.sheet_names:
            df = pd.read_excel(file_name, sheet_name=sheet)
            dup_rows = df[df.duplicated()]
            dup_columns = df.columns[df.apply(pd.Series.duplicated).any()].tolist()
            print(f"\nSheet: {sheet}")
            print(f"Duplicate rows: {len(dup_rows)}")
            print(f"Duplicate fields: {dup_columns if dup_columns else 'None'}")
    else:
        df = pd.read_csv(file_name)
        dup_rows = df[df.duplicated()]
        dup_columns = df.columns[df.apply(pd.Series.duplicated).any()].tolist()
        print(f"\nCSV File")
        print(f"Duplicate rows: {len(dup_rows)}")
        print(f"Duplicate fields: {dup_columns if dup_columns else 'None'}")

import streamlit as st
import pandas as pd

st.title("ðŸ“Š Redundancy Checker")

uploaded_file = st.file_uploader("Upload Excel or CSV File", type=["xlsx", "csv"])

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.xlsx'):
            excel_file = pd.ExcelFile(uploaded_file)
            for sheet in excel_file.sheet_names:
                df = pd.read_excel(uploaded_file, sheet_name=sheet)
                dup_rows = df[df.duplicated()]
                dup_columns = df.columns[df.apply(pd.Series.duplicated).any()].tolist()

                st.subheader(f"Sheet: {sheet}")
                st.write(f"âœ… Duplicate rows: {len(dup_rows)}")
                st.write(f"âœ… Duplicate fields: {dup_columns if dup_columns else 'None'}")

                if not dup_rows.empty:
                    st.write("Sample duplicate rows:")
                    st.dataframe(dup_rows.head())

        elif uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
            dup_rows = df[df.duplicated()]
            dup_columns = df.columns[df.apply(pd.Series.duplicated).any()].tolist()

            st.subheader("CSV File")
            st.write(f"âœ… Duplicate rows: {len(dup_rows)}")
            st.write(f"âœ… Duplicate fields: {dup_columns if dup_columns else 'None'}")

            if not dup_rows.empty:
                st.write("Sample duplicate rows:")
                st.dataframe(dup_rows.head())
        else:
            st.error("Unsupported file type. Please upload .xlsx or .csv files only.")

    except Exception as e:
        st.error(f"Error processing file: {str(e)}")

pip install streamlit pandas openpyxl

import streamlit as st
import pandas as pd

st.title("ðŸ“Š Redundancy Checker")

uploaded_file = st.file_uploader("Upload Excel or CSV File", type=["xlsx", "csv"])

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.xlsx'):
            excel_file = pd.ExcelFile(uploaded_file)
            for sheet in excel_file.sheet_names:
                df = pd.read_excel(uploaded_file, sheet_name=sheet)
                dup_rows = df[df.duplicated()]
                dup_columns = df.columns[df.apply(pd.Series.duplicated).any()].tolist()

                st.subheader(f"Sheet: {sheet}")
                st.write(f"âœ… Duplicate rows: {len(dup_rows)}")
                st.write(f"âœ… Duplicate fields: {dup_columns if dup_columns else 'None'}")

                if not dup_rows.empty:
                    st.write("Sample duplicate rows:")
                    st.dataframe(dup_rows.head())

        elif uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
            dup_rows = df[df.duplicated()]
            dup_columns = df.columns[df.apply(pd.Series.duplicated).any()].tolist()

            st.subheader("CSV File")
            st.write(f"âœ… Duplicate rows: {len(dup_rows)}")
            st.write(f"âœ… Duplicate fields: {dup_columns if dup_columns else 'None'}")

            if not dup_rows.empty:
                st.write("Sample duplicate rows:")
                st.dataframe(dup_rows.head())
        else:
            st.error("Unsupported file type. Please upload .xlsx or .csv files only.")

    except Exception as e:
        st.error(f"Error processing file: {str(e)}")

